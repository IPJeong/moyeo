<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!--  
<mapper namespace="패키지명.인터페이스">

-->
<mapper namespace="com.engineers.moyeo.main.dao.MainDAO">  <!-- 인터페이스 -->
    
    <select id="idCheck" parameterType="String" resultType="int">
		SELECT COUNT(*) 
		  FROM member_info 
		 WHERE mem_id= #{mem_id}
	</select>
	
	<!-- 비밀번호 체크 -->
	<select id="pwdCheck" parameterType="Map" resultType="int">
		SELECT COUNT(*) 
		  FROM member_info 
		 WHERE mem_id= #{mem_id} AND passwd = #{passwd}
	</select>
	
	<!-- 임시비밀번호 체크 -->
	<select id="tempPwdCheck" parameterType="Map" resultType="int">
		SELECT COUNT(*) 
		  FROM temppasswd_list 
		 WHERE mem_id= #{mem_id} AND temp_passwd = #{passwd}
	</select>
	
	<!-- 워드 클라우드 단어를 가져옴 -->
	<select id="getWordCloudModel" resultType="com.engineers.moyeo.main.dto.WordDTO">
		SELECT *
	      FROM (
				SELECT word, count, part_of_speech, update_date, reg_date, rownum as rn
				  FROM (SELECT *
                          FROM wordcloud_list
                 		 ORDER BY count DESC, update_date DESC, reg_date DESC
                        )				 
         		)
    	 WHERE rn BETWEEN 1 AND 30 
	</select>
	
	<!-- 워드 클라우드 단어를 확인 -->
	<select id="checkWordCloud" parameterType="String" resultType="int">
		SELECT COUNT(*)
		  FROM wordcloud_list
		 WHERE word = #{word}
	</select>
	
	<!-- 워드 클라우드 단어를 삽입 시킴 -->
	<insert id="addWordCloud" parameterType="com.engineers.moyeo.main.dto.WordDTO">
		INSERT INTO wordcloud_list (word, count, part_of_speech, update_date, reg_date) 
							VALUES (#{word}, #{count}, #{part_of_speech}, #{update_date}, #{reg_date})
	</insert>
	
	<!-- 워드 클라우드 단어를 업데이트 시킴 -->
	<update id="updateWordCloud" parameterType="com.engineers.moyeo.main.dto.WordDTO">
		UPDATE wordcloud_list
		   SET count = count + #{count},
		       update_date = #{update_date}
		 WHERE word = #{word}   
	</update>
	
	<!-- 워드클라우드 단어 검색 -->
	<select id="searchWordcloud" parameterType="Map" resultType="com.engineers.moyeo.main.dto.WordDTO">
		SELECT *
	      FROM (
				SELECT word, count, part_of_speech, update_date, reg_date, rownum as rn
				  FROM (
				  		SELECT *
                          FROM wordcloud_list
                 		 ORDER BY count DESC
                        )
                  WHERE 
                  <if test="type == 1">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun'
                  </if>
                  <if test="type == 2">
                  	part_of_speech = 'Verb'
                  </if>
                  <if test="type == 3">
                  	part_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 4">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun' OR part_of_speech = 'Verb'
                  </if>
                  <if test="type == 5">
                  	part_of_speech = 'Verb' OR part_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 6">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun' OR part_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 7">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun' OR part_of_speech = 'Verb' OR part_of_speech = 'Hashtag'
                  </if>
         		)
    	 WHERE rn BETWEEN 1 AND #{countOfWords} 
	</select>
	
	<!-- 워드클라우드 단어 검색 (날짜포함)-->
	<select id="searchWordcloud2" parameterType="Map" resultType="com.engineers.moyeo.main.dto.WordDTO">
		SELECT *
	      FROM (
				SELECT word, count, part_of_speech, update_date, reg_date, rownum as rn
				  FROM (
				  		SELECT *
                          FROM wordcloud_list
                          WHERE update_date BETWEEN #{strDate} AND #{endDate}
                 		 ORDER BY count DESC
                        )
                  
                  WHERE 
                  <if test="type == 1">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun'
                  </if>
                  <if test="type == 2">
                  	part_of_speech = 'Verb'
                  </if>
                  <if test="type == 3">
                  	part_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 4">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun' OR part_of_speech = 'Verb'
                  </if>
                  <if test="type == 5">
                  	part_of_speech = 'Verb' OR part_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 6">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun' OR part_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 7">
                  	part_of_speech = 'Noun' OR part_of_speech = 'ProperNoun' OR part_of_speech = 'Verb' OR part_of_speech = 'Hashtag'
                  </if>
                  
         		)
    	 WHERE rn BETWEEN 1 AND #{countOfWords} 
	</select>
	
	<!-- 모임후기 사진 조회 -->
	<select id="getMainPictures" parameterType="Map" resultType="com.engineers.moyeo.main.dto.MainPicDTO">
		SELECT * 
		  FROM (
		        SELECT post_num, replyCnt, likeCnt, total, pic_path, pic_name, group_num, rownum as rn
		          FROM (
		                SELECT DISTINCT fin.post_num, fin.replyCnt, fin.likeCnt, fin.total, pic_path, pic_name, fin.group_num
		                  FROM (
		                        SELECT fina.post_num, fina.replyCnt as replyCnt , fina.likeCnt as likeCnt, fina.total as total, fina.group_num
		                          FROM (
		                                SELECT mpr.post_num, replyCnt, likeCnt, (replyCnt + likeCnt) as total, mpr.group_num
		                                  FROM (SELECT COUNT(postrep_num) as replyCnt, mp.post_num, mp.group_num
		                                         FROM meeting_post_reply mpr, meeting_post mp
		                                        WHERE mp.post_num = mpr.post_num(+)
		                                        GROUP BY mp.post_num, mp.group_num) mpr,
		                                        (SELECT COUNT(post_like_num) as likeCnt, mp.post_num, mp.group_num
		                                           FROM meeting_post_like mpl, meeting_post mp
		                                          WHERE mpl.post_num(+) = mp.post_num
		                                          GROUP BY mp.post_num, mp.group_num) mpl
		                                  WHERE mpr.post_num = mpl.post_num                    
		                                ) fina, post_pictures pp
		                          WHERE fina.post_num = pp.post_num
		                      ) fin, post_pictures pp
		                 WHERE fin.post_num = pp.post_num
		                 ORDER BY fin.total DESC, fin.replyCnt DESC, fin.likeCnt DESC
		                 )
		           )
		  WHERE rn BETWEEN #{start} AND #{end}
		  ORDER BY rn ASC
	</select>
	
	<!-- 모임후기 동영상 조회 -->
	<select id="getMainVideos" parameterType="Map" resultType="com.engineers.moyeo.main.dto.MainVideoDTO">
		SELECT * 
		  FROM (
		        SELECT post_num, replyCnt, likeCnt, total, video_path, video_name, group_num, rownum as rn
		          FROM (
		                SELECT DISTINCT fin.post_num, fin.replyCnt, fin.likeCnt, fin.total, video_path, video_name, fin.group_num
		                  FROM (
		                        SELECT fina.post_num, fina.replyCnt as replyCnt , fina.likeCnt as likeCnt, fina.total as total, fina.group_num
		                          FROM (
		                                SELECT mpr.post_num, replyCnt, likeCnt, (replyCnt + likeCnt) as total, mpr.group_num
		                                  FROM (SELECT COUNT(postrep_num) as replyCnt, mp.post_num, mp.group_num
		                                         FROM meeting_post_reply mpr, meeting_post mp
		                                        WHERE mp.post_num = mpr.post_num(+)
		                                        GROUP BY mp.post_num, mp.group_num) mpr,
		                                        (SELECT COUNT(post_like_num) as likeCnt, mp.post_num
		                                           FROM meeting_post_like mpl, meeting_post mp
		                                          WHERE mpl.post_num(+) = mp.post_num
		                                          GROUP BY mp.post_num) mpl
		                                  WHERE mpr.post_num = mpl.post_num                    
		                                ) fina, post_video pv
		                          WHERE fina.post_num = pv.post_num
		                      ) fin, post_video pv
		                 WHERE fin.post_num = pv.post_num
		                 ORDER BY fin.total DESC, fin.replyCnt DESC, fin.likeCnt DESC
		                 )
		           )
		  WHERE rn BETWEEN #{start} AND #{end}
		  ORDER BY rn ASC
	</select>
	
	<select id="getMeetingPost" parameterType="String" resultType="com.engineers.moyeo.five.dto.MeetingPostDTO">
		SELECT * 
	       FROM (
	             SELECT post_num, post_title, post_content, post_tag, post_date, like_num, mem_id, group_num, post_hit, rownum rn
	               FROM (
	                     SELECT *
	                       FROM meeting_post
	                      WHERE post_date >= to_date(#{last_day} , 'YYYY-MM-DD')
	                      ORDER BY like_num DESC, post_hit DESC, post_date DESC
	                    )
	              )
	       WHERE rn BETWEEN 1 AND 8
	</select>
	
	<!-- 모임후기 사진 전체 개수 구하기 -->
	<select id="getTotalPicCnt" resultType="int">
		SELECT COUNT(*)
		  FROM post_pictures
	</select>
	
	<!-- 모임후기 동영상 전체 개수 구하기 -->
	<select id="getTotalVideoCnt" resultType="int">
		SELECT COUNT(*)
		  FROM post_video
	</select>
	
	<!-- 모임후기 사진 가져오기(메인 갤러리) -->
	<select id="getPostPictures" parameterType="Map" resultType="com.engineers.moyeo.five.dto.PostPictureDTO">
		SELECT * 
		  FROM (
		        SELECT pic_num, pic_path, pic_name, group_num, post_num, rownum as rn
		          FROM (
		                SELECT DISTINCT pp.pic_num, pp.pic_path, pp.pic_name, pp.group_num, pp.post_num, fin.total, fin.replyCnt, fin.likeCnt
		                  FROM (
		                        SELECT fina.post_num, fina.replyCnt as replyCnt , fina.likeCnt as likeCnt, fina.total as total, fina.group_num
		                          FROM (
		                                SELECT mpr.post_num, replyCnt, likeCnt, (replyCnt + likeCnt) as total, mpr.group_num
		                                  FROM (SELECT COUNT(postrep_num) as replyCnt, mp.post_num, mp.group_num
		                                          FROM meeting_post_reply mpr, meeting_post mp
		                                         WHERE mp.post_num = mpr.post_num(+)
		                                         GROUP BY mp.post_num, mp.group_num) mpr,
		                                        (SELECT COUNT(post_like_num) as likeCnt, mp.post_num, mp.group_num
		                                           FROM meeting_post_like mpl, meeting_post mp
		                                          WHERE mpl.post_num(+) = mp.post_num
		                                          GROUP BY mp.post_num, mp.group_num) mpl
		                                  WHERE mpr.post_num = mpl.post_num                    
		                                ) fina, post_pictures pp
		                          WHERE fina.post_num = pp.post_num
		                      ) fin, post_pictures pp
		                 WHERE fin.post_num = pp.post_num
		                 ORDER BY fin.total DESC, fin.replyCnt DESC, fin.likeCnt DESC
		                 )
		           )
		  WHERE rn BETWEEN #{start} AND #{end}
		  ORDER BY rn ASC
	</select>
	
	<!-- 모임후기 동영상 가져오기(메인 갤러리) -->
	<select id="getPostVideos" parameterType="Map" resultType="com.engineers.moyeo.five.dto.PostVideoDTO">
		SELECT * 
		  FROM (
		        SELECT video_num, video_path, video_name, mem_id, group_num, post_num, replyCnt, likeCnt, total, rownum as rn
		          FROM (
		                SELECT DISTINCT pv.video_num, pv.video_path, pv.video_name, pv.mem_id, pv.group_num, pv.post_num, fin.replyCnt, fin.likeCnt, fin.total
		                  FROM (
		                        SELECT fina.post_num, fina.replyCnt as replyCnt , fina.likeCnt as likeCnt, fina.total as total, fina.group_num
		                          FROM (
		                                SELECT mpr.post_num, replyCnt, likeCnt, (replyCnt + likeCnt) as total, mpr.group_num
		                                  FROM (SELECT COUNT(postrep_num) as replyCnt, mp.post_num, mp.group_num
		                                         FROM meeting_post_reply mpr, meeting_post mp
		                                        WHERE mp.post_num = mpr.post_num(+)
		                                        GROUP BY mp.post_num, mp.group_num) mpr,
		                                        (SELECT COUNT(post_like_num) as likeCnt, mp.post_num
		                                           FROM meeting_post_like mpl, meeting_post mp
		                                          WHERE mpl.post_num(+) = mp.post_num
		                                          GROUP BY mp.post_num) mpl
		                                  WHERE mpr.post_num = mpl.post_num                    
		                                ) fina, post_video pv
		                          WHERE fina.post_num = pv.post_num
		                      ) fin, post_video pv
		                 WHERE fin.post_num = pv.post_num
		                 ORDER BY fin.total DESC, fin.replyCnt DESC, fin.likeCnt DESC
		                 )
		           )
		  WHERE rn BETWEEN #{start} AND #{end}
		  ORDER BY rn ASC
	</select>
	
	<!-- 회원의 알림을 등록 -->
	<insert id="addMemberNoti" parameterType="com.engineers.moyeo.main.dto.MemberNotiDTO">
		insert into member_noti (noti_num, noti_content, is_checked, noti_date, mem_id)
						 VALUES (member_noti_seq.nextval, #{noti_content}, #{is_checked}, #{noti_date}, #{mem_id})
	</insert>
	
	<!-- 모임장 알림을 등록 -->
	<insert id="addLeaderNoti" parameterType="com.engineers.moyeo.main.dto.GroupLeaderNotiDTO">
		insert into group_leader_noti (noti_num, noti_content, is_checked, noti_date, mem_id)
						 VALUES (member_noti_seq.nextval, #{noti_content}, #{is_checked}, #{noti_date}, #{mem_id})
	</insert>
	
	<!-- 판매자 알림을 등록 -->
	<insert id="addSellerNoti" parameterType="com.engineers.moyeo.main.dto.SellerNotiDTO">
		insert into seller_noti (noti_num, noti_content, is_checked, noti_date, seller_id)
						 VALUES (member_noti_seq.nextval, #{noti_content}, #{is_checked}, #{noti_date}, #{seller_id})
	</insert>
</mapper>